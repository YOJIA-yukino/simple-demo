// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: video_sd.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoDaoInfoClient is the client API for VideoDaoInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoDaoInfoClient interface {
	AddVideo(ctx context.Context, in *VideoDaoPost, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	GetPublishIdList(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (VideoDaoInfo_GetPublishIdListClient, error)
	GetVideoByVideoId(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*VideoDaoMsg, error)
	GetVideoListByVideoIdList(ctx context.Context, opts ...grpc.CallOption) (VideoDaoInfo_GetVideoListByVideoIdListClient, error)
}

type videoDaoInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoDaoInfoClient(cc grpc.ClientConnInterface) VideoDaoInfoClient {
	return &videoDaoInfoClient{cc}
}

func (c *videoDaoInfoClient) AddVideo(ctx context.Context, in *VideoDaoPost, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/user.VideoDaoInfo/addVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoDaoInfoClient) GetPublishIdList(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (VideoDaoInfo_GetPublishIdListClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoDaoInfo_ServiceDesc.Streams[0], "/user.VideoDaoInfo/getPublishIdList", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoDaoInfoGetPublishIdListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VideoDaoInfo_GetPublishIdListClient interface {
	Recv() (*wrapperspb.Int64Value, error)
	grpc.ClientStream
}

type videoDaoInfoGetPublishIdListClient struct {
	grpc.ClientStream
}

func (x *videoDaoInfoGetPublishIdListClient) Recv() (*wrapperspb.Int64Value, error) {
	m := new(wrapperspb.Int64Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoDaoInfoClient) GetVideoByVideoId(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*VideoDaoMsg, error) {
	out := new(VideoDaoMsg)
	err := c.cc.Invoke(ctx, "/user.VideoDaoInfo/getVideoByVideoId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoDaoInfoClient) GetVideoListByVideoIdList(ctx context.Context, opts ...grpc.CallOption) (VideoDaoInfo_GetVideoListByVideoIdListClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoDaoInfo_ServiceDesc.Streams[1], "/user.VideoDaoInfo/getVideoListByVideoIdList", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoDaoInfoGetVideoListByVideoIdListClient{stream}
	return x, nil
}

type VideoDaoInfo_GetVideoListByVideoIdListClient interface {
	Send(*wrapperspb.Int64Value) error
	Recv() (*VideoDaoMsg, error)
	grpc.ClientStream
}

type videoDaoInfoGetVideoListByVideoIdListClient struct {
	grpc.ClientStream
}

func (x *videoDaoInfoGetVideoListByVideoIdListClient) Send(m *wrapperspb.Int64Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoDaoInfoGetVideoListByVideoIdListClient) Recv() (*VideoDaoMsg, error) {
	m := new(VideoDaoMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoDaoInfoServer is the server API for VideoDaoInfo service.
// All implementations must embed UnimplementedVideoDaoInfoServer
// for forward compatibility
type VideoDaoInfoServer interface {
	AddVideo(context.Context, *VideoDaoPost) (*wrapperspb.BoolValue, error)
	GetPublishIdList(*wrapperspb.Int64Value, VideoDaoInfo_GetPublishIdListServer) error
	GetVideoByVideoId(context.Context, *wrapperspb.Int64Value) (*VideoDaoMsg, error)
	GetVideoListByVideoIdList(VideoDaoInfo_GetVideoListByVideoIdListServer) error
	mustEmbedUnimplementedVideoDaoInfoServer()
}

// UnimplementedVideoDaoInfoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoDaoInfoServer struct {
}

func (UnimplementedVideoDaoInfoServer) AddVideo(context.Context, *VideoDaoPost) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideo not implemented")
}
func (UnimplementedVideoDaoInfoServer) GetPublishIdList(*wrapperspb.Int64Value, VideoDaoInfo_GetPublishIdListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPublishIdList not implemented")
}
func (UnimplementedVideoDaoInfoServer) GetVideoByVideoId(context.Context, *wrapperspb.Int64Value) (*VideoDaoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoByVideoIdInfo not implemented")
}
func (UnimplementedVideoDaoInfoServer) GetVideoListByVideoIdList(VideoDaoInfo_GetVideoListByVideoIdListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVideoListByVideoIdList not implemented")
}
func (UnimplementedVideoDaoInfoServer) mustEmbedUnimplementedVideoDaoInfoServer() {}

// UnsafeVideoDaoInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoDaoInfoServer will
// result in compilation errors.
type UnsafeVideoDaoInfoServer interface {
	mustEmbedUnimplementedVideoDaoInfoServer()
}

func RegisterVideoDaoInfoServer(s grpc.ServiceRegistrar, srv VideoDaoInfoServer) {
	s.RegisterService(&VideoDaoInfo_ServiceDesc, srv)
}

func _VideoDaoInfo_AddVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoDaoPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoDaoInfoServer).AddVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VideoDaoInfo/addVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoDaoInfoServer).AddVideo(ctx, req.(*VideoDaoPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoDaoInfo_GetPublishIdList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.Int64Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoDaoInfoServer).GetPublishIdList(m, &videoDaoInfoGetPublishIdListServer{stream})
}

type VideoDaoInfo_GetPublishIdListServer interface {
	Send(*wrapperspb.Int64Value) error
	grpc.ServerStream
}

type videoDaoInfoGetPublishIdListServer struct {
	grpc.ServerStream
}

func (x *videoDaoInfoGetPublishIdListServer) Send(m *wrapperspb.Int64Value) error {
	return x.ServerStream.SendMsg(m)
}

func _VideoDaoInfo_GetVideoByVideoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoDaoInfoServer).GetVideoByVideoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.VideoDaoInfo/getVideoByVideoId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoDaoInfoServer).GetVideoByVideoId(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoDaoInfo_GetVideoListByVideoIdList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoDaoInfoServer).GetVideoListByVideoIdList(&videoDaoInfoGetVideoListByVideoIdListServer{stream})
}

type VideoDaoInfo_GetVideoListByVideoIdListServer interface {
	Send(*VideoDaoMsg) error
	Recv() (*wrapperspb.Int64Value, error)
	grpc.ServerStream
}

type videoDaoInfoGetVideoListByVideoIdListServer struct {
	grpc.ServerStream
}

func (x *videoDaoInfoGetVideoListByVideoIdListServer) Send(m *VideoDaoMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoDaoInfoGetVideoListByVideoIdListServer) Recv() (*wrapperspb.Int64Value, error) {
	m := new(wrapperspb.Int64Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoDaoInfo_ServiceDesc is the grpc.ServiceDesc for VideoDaoInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoDaoInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.VideoDaoInfo",
	HandlerType: (*VideoDaoInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addVideo",
			Handler:    _VideoDaoInfo_AddVideo_Handler,
		},
		{
			MethodName: "getVideoByVideoId",
			Handler:    _VideoDaoInfo_GetVideoByVideoId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getPublishIdList",
			Handler:       _VideoDaoInfo_GetPublishIdList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getVideoListByVideoIdList",
			Handler:       _VideoDaoInfo_GetVideoListByVideoIdList_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "video_sd.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: video_cs.proto

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoServiceInfoClient is the client API for VideoServiceInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceInfoClient interface {
	PublishVideoInfo(ctx context.Context, in *VideoServicePost, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type videoServiceInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceInfoClient(cc grpc.ClientConnInterface) VideoServiceInfoClient {
	return &videoServiceInfoClient{cc}
}

func (c *videoServiceInfoClient) PublishVideoInfo(ctx context.Context, in *VideoServicePost, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/video.VideoServiceInfo/publishVideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceInfoServer is the server API for VideoServiceInfo service.
// All implementations must embed UnimplementedVideoServiceInfoServer
// for forward compatibility
type VideoServiceInfoServer interface {
	PublishVideoInfo(context.Context, *VideoServicePost) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedVideoServiceInfoServer()
}

// UnimplementedVideoServiceInfoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceInfoServer struct {
}

func (UnimplementedVideoServiceInfoServer) PublishVideoInfo(context.Context, *VideoServicePost) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideoInfo not implemented")
}
func (UnimplementedVideoServiceInfoServer) mustEmbedUnimplementedVideoServiceInfoServer() {}

// UnsafeVideoServiceInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceInfoServer will
// result in compilation errors.
type UnsafeVideoServiceInfoServer interface {
	mustEmbedUnimplementedVideoServiceInfoServer()
}

func RegisterVideoServiceInfoServer(s grpc.ServiceRegistrar, srv VideoServiceInfoServer) {
	s.RegisterService(&VideoServiceInfo_ServiceDesc, srv)
}

func _VideoServiceInfo_PublishVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoServicePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceInfoServer).PublishVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoServiceInfo/publishVideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceInfoServer).PublishVideoInfo(ctx, req.(*VideoServicePost))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoServiceInfo_ServiceDesc is the grpc.ServiceDesc for VideoServiceInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoServiceInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoServiceInfo",
	HandlerType: (*VideoServiceInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "publishVideoInfo",
			Handler:    _VideoServiceInfo_PublishVideoInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video_cs.proto",
}

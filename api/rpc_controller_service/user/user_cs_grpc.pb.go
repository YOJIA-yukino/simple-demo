// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: user_cs.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceInfoClient is the client API for UserServiceInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceInfoClient interface {
	UserRegister(ctx context.Context, in *UserServicePost, opts ...grpc.CallOption) (*UserServiceResp, error)
	GetUserInfo(ctx context.Context, in *UserServicePost, opts ...grpc.CallOption) (*UserServiceInfoResp, error)
	GetUserIdByUserName(ctx context.Context, in *UserServicePost, opts ...grpc.CallOption) (*UserServiceResp, error)
}

type userServiceInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceInfoClient(cc grpc.ClientConnInterface) UserServiceInfoClient {
	return &userServiceInfoClient{cc}
}

func (c *userServiceInfoClient) UserRegister(ctx context.Context, in *UserServicePost, opts ...grpc.CallOption) (*UserServiceResp, error) {
	out := new(UserServiceResp)
	err := c.cc.Invoke(ctx, "/user.UserServiceInfo/userRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceInfoClient) GetUserInfo(ctx context.Context, in *UserServicePost, opts ...grpc.CallOption) (*UserServiceInfoResp, error) {
	out := new(UserServiceInfoResp)
	err := c.cc.Invoke(ctx, "/user.UserServiceInfo/getUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceInfoClient) GetUserIdByUserName(ctx context.Context, in *UserServicePost, opts ...grpc.CallOption) (*UserServiceResp, error) {
	out := new(UserServiceResp)
	err := c.cc.Invoke(ctx, "/user.UserServiceInfo/getUserIdByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceInfoServer is the server API for UserServiceInfo service.
// All implementations must embed UnimplementedUserServiceInfoServer
// for forward compatibility
type UserServiceInfoServer interface {
	UserRegister(context.Context, *UserServicePost) (*UserServiceResp, error)
	GetUserInfo(context.Context, *UserServicePost) (*UserServiceInfoResp, error)
	GetUserIdByUserName(context.Context, *UserServicePost) (*UserServiceResp, error)
	mustEmbedUnimplementedUserServiceInfoServer()
}

// UnimplementedUserServiceInfoServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceInfoServer struct {
}

func (UnimplementedUserServiceInfoServer) UserRegister(context.Context, *UserServicePost) (*UserServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServiceInfoServer) GetUserInfo(context.Context, *UserServicePost) (*UserServiceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceInfoServer) GetUserIdByUserName(context.Context, *UserServicePost) (*UserServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdByUserName not implemented")
}
func (UnimplementedUserServiceInfoServer) mustEmbedUnimplementedUserServiceInfoServer() {}

// UnsafeUserServiceInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceInfoServer will
// result in compilation errors.
type UnsafeUserServiceInfoServer interface {
	mustEmbedUnimplementedUserServiceInfoServer()
}

func RegisterUserServiceInfoServer(s grpc.ServiceRegistrar, srv UserServiceInfoServer) {
	s.RegisterService(&UserServiceInfo_ServiceDesc, srv)
}

func _UserServiceInfo_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServicePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceInfoServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserServiceInfo/userRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceInfoServer).UserRegister(ctx, req.(*UserServicePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceInfo_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServicePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceInfoServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserServiceInfo/getUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceInfoServer).GetUserInfo(ctx, req.(*UserServicePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServiceInfo_GetUserIdByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserServicePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceInfoServer).GetUserIdByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserServiceInfo/getUserIdByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceInfoServer).GetUserIdByUserName(ctx, req.(*UserServicePost))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServiceInfo_ServiceDesc is the grpc.ServiceDesc for UserServiceInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServiceInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserServiceInfo",
	HandlerType: (*UserServiceInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "userRegister",
			Handler:    _UserServiceInfo_UserRegister_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _UserServiceInfo_GetUserInfo_Handler,
		},
		{
			MethodName: "getUserIdByUserName",
			Handler:    _UserServiceInfo_GetUserIdByUserName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_cs.proto",
}
